package sol.backend.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Repository;

import sol.backend.domain.Address;

@Repository
public class JdbcAddressRepository implements AddressRepository {
    @Autowired
    private DataSource dataSource;

    public Connection getConnection() {
        System.out.println(dataSource);
        return DataSourceUtils.getConnection(dataSource);
    }

    public void close(Connection conn) {
        DataSourceUtils.releaseConnection(conn, dataSource);
    }

    private void close(List<AutoCloseable> closeables) {
        closeables.forEach((closeable) -> {
            if (closeable != null) {
                try {
                    closeable.close();
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    public List<Address> list() {
        ArrayList<Address> list = new ArrayList<>();
        String sql = "SELECT * FROM ADDRESS ORDER BY NAME";
        Connection conn = getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                long seq = rs.getLong(1);
                String name = rs.getString(2);
                String addr = rs.getString(3);
                Date rdate = rs.getDate(4);
                list.add(new Address(seq, name, addr, rdate));
            }
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        close(List.of(rs, pstmt, conn));
        return list;
    }

    @Override
    public Address insert(Address address) {
        String sql = "INSERT INTO ADDRESS VALUES (ADDRESS_SEQ.nextval, ?, ?, SYSDATE)";
        Connection conn = getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, address.getName());
            pstmt.setString(2, address.getAddr());
            pstmt.executeUpdate();
            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                return getAddress(rs.getRowId(1));
            } else {
                return null;
            }

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        }
    }

    private Address getAddress(RowId rowid) {
        String sql = "select * from ADDRESS where ROWID=?";
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setRowId(1, rowid);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                long seq = rs.getLong(1);
                String name = rs.getString(2);
                String addr = rs.getString(3);
                Date rdate = rs.getDate(4);
                return new Address(seq, name, addr, rdate);
            } else {
                return null;
            }
        } catch (SQLException se) {
            System.out.println("#getAddress() se: " + se);
            return null;
        } finally {
            close(List.of(con, pstmt, rs));
        }
    }

    @Override
    public boolean delete(long seq) {
        String sql = "DELETE FROM ADDRESS WHERE SEQ=?";
        Connection conn = getConnection();
        PreparedStatement pstmt = null;
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, seq);
            int rows = pstmt.executeUpdate();
            if (rows == 1) {
                return true;
            } else {
                return false;
            }

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return false;
        } finally {
            close(List.of(pstmt, conn));
        }
    }

}
